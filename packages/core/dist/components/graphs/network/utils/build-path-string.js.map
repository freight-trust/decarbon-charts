{"version":3,"file":"build-path-string.js","sourceRoot":"","sources":["build-path-string.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,IAAI,MAAM,EAAE,MAAM,SAAS,CAAC;AAEzC,gBAAe,UAAC,MAAM,EAAE,MAAM,EAAE,YAAgB,EAAE,WAAe,EAAE,OAAa;IAAhD,6BAAA,EAAA,gBAAgB;IAAE,4BAAA,EAAA,eAAe;IAAE,wBAAA,EAAA,aAAa;IAC/E,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAClB,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAClB,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAClB,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAElB,EAAE,GAAI,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IAC9B,EAAE,GAAI,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IAE9B,0BAA0B;IAC1B,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,EAAE,GAAG,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7B,EAAE,GAAG,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7B,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAC5B,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;KAC5B;IAED,0BAA0B;IAC1B,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,EAAE,GAAG,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7B,EAAE,GAAG,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7B,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAC5B,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;KAC5B;IAED,qBAAqB;IACrB,IAAI,EAAE,GAAG,EAAE,EAAE;QACZ,EAAE,GAAG,EAAE,GAAG,WAAW,CAAC;KACtB;IAED,qBAAqB;IACrB,IAAI,EAAE,GAAG,EAAE,EAAE;QACZ,EAAE,GAAG,EAAE,GAAG,WAAW,CAAC;KACtB;IAED,IAAM,SAAS,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;IAC3C,IAAM,SAAS,GAAG,EAAE,GAAG,CAAC,CAAC;IAEzB,IAAM,IAAI,GAAG,MAAM,EAAE,CAAC;IACtB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEpB,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;KAC3B;IAED,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEpB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC,EAAC","sourcesContent":["import { path as d3Path } from \"d3-path\";\n\nexport default (source, target, offsetHeight = 0, offsetWidth = 0, percent = 0.5) => {\n\tlet sx = source.x;\n\tlet sy = source.y;\n\tlet tx = target.x;\n\tlet ty = target.y;\n\n\tsy =  sy + (offsetHeight / 2);\n\tty =  ty + (offsetHeight / 2);\n\n\t// If it's pointing pure N\n\tif (sy > ty && tx === sx) {\n\t\tty = ty + (offsetHeight / 2);\n\t\tsy = sy - (offsetHeight / 2);\n\t\tsx = sx + (offsetWidth / 2);\n\t\ttx = tx + (offsetWidth / 2);\n\t}\n\n\t// If it's pointing pure S\n\tif (ty > sy && tx === sx) {\n\t\tty = ty - (offsetHeight / 2);\n\t\tsy = sy + (offsetHeight / 2);\n\t\tsx = sx + (offsetWidth / 2);\n\t\ttx = tx + (offsetWidth / 2);\n\t}\n\n\t// If it's pointing W\n\tif (tx > sx) {\n\t\tsx = sx + offsetWidth;\n\t}\n\n\t// If it's pointing E\n\tif (sx > tx) {\n\t\ttx = tx + offsetWidth;\n\t}\n\n\tconst midPointX = sx + (tx - sx) * percent;\n\tconst midPointY = sy + 4;\n\n\tconst path = d3Path();\n\tpath.moveTo(sx, sy);\n\n\tif (ty !== sy && tx !== sx) {\n\t\tpath.lineTo(midPointX, sy);\n\t\tpath.lineTo(midPointX, ty);\n\t}\n\n\tpath.lineTo(tx, ty);\n\n\treturn path.toString();\n};\n"]}